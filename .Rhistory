getwd()
source(/Users/driri/Documents/Coursera/GettingData/CourseProject/run_analysis.R)
source("/Users/driri/Documents/Coursera/GettingData/CourseProject/run_analysis.R")
write.table(data_cast, file = "tidy_data_file.txt",row.name=FALSE)
print("the file tidy_data_file.text is in your working directory")
ls()
file.exist("tidy_data_file.text")
file.exist("tidy_data_file.txt")
file.exists("tidy_data_file.txt")
getwd()
unlink("/Users/driri/CourseProject", recursive=T)
getwd()
source("/Users/driri/run_analysis.R")
install.packages("downloader")
install.packages("httr")
install.packages("dplyr")
install.packages("plyr")
install.packages("httr")
install.packages("downloader")
install.packages("dplyr")
install.packages("plyr")
install.packages("dplyr")
install.packages("downloader")
install.packages("plyr")
install.packages("downloader")
install.packages("plyr")
install.packages("plyr")
getwd()
unlink("/Users/driri/CourseProject", recursive=T)
getwd()
source("/Users/driri/run_analysis.R")
unlink("/Users/driri/CourseProject", recursive=T)
getwd()
source("/Users/driri/run_analysis.R")
unlink("/Users/driri/CourseProject", recursive=T)
getwd()
source("/Users/driri/run_analysis.R")
unlink("/Users/driri/CourseProject", recursive=T)
getwd()
ls()
getwd()
source("/Users/driri/run_analysis.R")
unlink("/Users/driri/CourseProject/", recursive=T)
getwd
getwd()
ls()
rm(Xtest, Xtrain, Ytest, Ytrain, Strain, Stest)
rm(activity_labels, col_mean.std, data_cast, data_melt, data_full, data_mean.std, feat_mean.std, train_full, test_full, data_full, doanload_zip, dir)
rm(activity_labels, col_mean.std, data_cast, data_melt, data_full, data_mean.std, feat_mean.std, train_full, test_full)
rm(activity_labels, col_mean.std, data_cast, data_melt, data_mean.std, feat_mean.std, train_full, test_full)
ls()
rm(download_zip)
rm(feat_labels, i)
getwd()
ls()
source("/Users/driri/run_analysis.R")
ls()
rm(download_zip, i, dir, activity_labels, Xtrain, Xtest, Strain, Stest, Ytrain, Ytest, train_full, test_full, data_full, col_mean.std, feat_lebels, feat_mean.std, data_cast, data_melt, data_full, data_mean.std)
ls()
rm(feat_labels)
unlink("/Users/driri/CourseProject/", recursive=T)
source("/Users/driri/Documents/Coursera/GettingData/CourseProject/run_analysis.R")
ls()
getwd()
unlink("/Users/driri/CourseProject/", recursive=T)
swirl()
load swirl
library("swirl")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(package, mean(size))
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum$count > 679)
top_counts <- filter(pack_sum$count > "679")
top_counts <- filter_(pack_sum$count > 679)
top_counts <- filter_(pack_sum, count > 679)
top_counts <- filter_(pack_sum, count > "679")
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, by = count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
submit()
submit()
submit()
students3
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students2
students4
students4
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
passed <- mutate(failed, status = "failed")
failed <- mutate(failed, status = "failed")
passed
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library("lubridate")
library(lubridate)
help(package =lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192010")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 14, minutes = 53)
this_moment <- update(this_moment, hours = 14, minutes = 54)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc +  days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_internal(last_time, arrive, tzone = attr(last_time, "Asia/Hong_Kong"))
how_long <- new_interval(last_time, arrive, tzone = attr(last_time, "Asia/Hong_Kong"))
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
file.path(find.package("swirl"),"Courses/Exploratory_Data_Analysis/Base_Plotting_System")
library("swirl")
ls()
init swirl
start swirl
swirl()
install_from_swirl("Exploratory_Data_Analysis")
swirl()
install_from_swirl("Base_Plotting_System")
exit
leave.swirl()
swirl("exit")
swirl()
plot(x, y)
exit
bye()
install_from_swirl("Base_Plotting_System")
swirl()
swirl()
install_from_swirl("Courses/Exploratory_Data_Analysis/Base_Plotting_System")
install_from_swirl("/Exploratory_Data_Analysis/Base_Plotting_System")
install_from_swirl("Exploratory_Data_Analysis/Base_Plotting_System")
swirl()
swirl()
png()
quartz()
bitmap()
pdf()
quartz()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
plot()
bye()
swirl()
setwd("~/Documents/Coursera/Exploratory Data/Assign2")
#LIBRARIES
library("plyr")
#READ DATA
if(!file.exists("data")) {  dir.create("data") }
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(fileURL, destfile = "./pm25.zip")
unzip("./pm25.zip",exdir="./data")
NEI <- readRDS("./data/summarySCC_PM25.rds")
#SUMMARIZE DATA
NEIy <- ddply(NEI,.(year),summarize,Total_Emissions=sum(Emissions))
#PLOT DATA
with(NEIy,plot(year,Total_Emissions))
model<-lm(Total_Emissions ~ year,NEIy)
abline(model,lwd=2)
dev.copy(png,file="plot1.png")
dev.off()
source("test.R")
getwd()
knit2html()
knit2html
package("knitte")
package("knittr")
package("knitr")
package(knitr)
library("knitr", lib.loc="~/Library/R/3.2/library")
knit2html()
knit2html("project_assessment1.Rmd")
knit2html("project_assessment_1.Rmd")
getwd()
setwd("~/Documents/Coursera/Reproducible Research/RepData_PeerAssessment1")
knit2html("project_assessment_1.Rmd")
knit2html("project_assessment_1.Rmd")
knit2html("project_assessment_1.Rmd")
knit2html("project_assessment_1.Rmd")
knit2html("project_assessment_1.Rmd")
knit2html("project_assessment_1.Rmd")
