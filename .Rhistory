View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
submit()
submit()
submit()
students3
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students2
students4
students4
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
passed <- mutate(failed, status = "failed")
failed <- mutate(failed, status = "failed")
passed
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library("lubridate")
library(lubridate)
help(package =lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192010")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 14, minutes = 53)
this_moment <- update(this_moment, hours = 14, minutes = 54)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc +  days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz = "Asia/Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_internal(last_time, arrive, tzone = attr(last_time, "Asia/Hong_Kong"))
how_long <- new_interval(last_time, arrive, tzone = attr(last_time, "Asia/Hong_Kong"))
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
file.path(find.package("swirl"),"Courses/Exploratory_Data_Analysis/Base_Plotting_System")
library("swirl")
ls()
init swirl
start swirl
swirl()
install_from_swirl("Exploratory_Data_Analysis")
swirl()
install_from_swirl("Base_Plotting_System")
exit
leave.swirl()
swirl("exit")
swirl()
plot(x, y)
exit
bye()
install_from_swirl("Base_Plotting_System")
swirl()
swirl()
install_from_swirl("Courses/Exploratory_Data_Analysis/Base_Plotting_System")
install_from_swirl("/Exploratory_Data_Analysis/Base_Plotting_System")
install_from_swirl("Exploratory_Data_Analysis/Base_Plotting_System")
swirl()
swirl()
png()
quartz()
bitmap()
pdf()
quartz()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
plot()
bye()
swirl()
setwd("~/Documents/Coursera/Reproducible Research/RepData_PeerAssessment1")
knit2html("PA_template.Rmd")
knit2html(PA_template.Rmd)
package(knittr)
package(knitr)
package("knitr")
install.package("knitr")
instal.package("knitr")
library("knitr", lib.loc="~/Library/R/3.2/library")
knit2html(PA_template.Rmd)
knit2html('PA_template.Rmd'')
knit2html('PA_template.Rmd')
knit2html('PA_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
getwd()
if (!file.exists("activity.zip")){
unzip ("activity.zip", exdir = "./")
}
list.dirs()
ls()
activity_file <- "activity.csv"
data <- read.csv(activity_file,
sep = ",",
header = TRUE,
colClasses = c("integer", "Date", "factor"),
na.strings = "NA")
rm(activity_file ## some clean-up
data$month <- as.numeric(format(data$date, "%m"))
activity_file <- "activity.csv"
data <- read.csv(activity_file,
sep = ",",
header = TRUE,
colClasses = c("integer", "Date", "factor"),
na.strings = "NA")
rm(activity_file) ## some clean-up
data$month <- as.numeric(format(data$date, "%m"))
require(ggplot2)
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(totalSteps, binwidth=1000, xlab="Total number of steps taken each day")
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
data_rmNA <- na.omit(data)
ggplot(data_rmNA, aes(date, totalSteps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, totalSteps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("day")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
library(scales)
ggplot(data_rmNA, aes(date, totalSteps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("day")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("day")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("wee")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(data_rmNA$date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
ggplot(data_rmNA, aes(date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "green", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
ggplot(data_rmNA, aes(date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "blue", fill = "blue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
ggplot(data_rmNA, aes(date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "orange", fill = "blue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
ggplot(data_rmNA, aes(date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "babyblue", fill = "blue", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "#009E73", fill = "#009E73", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(data_rmNA, aes(date, data_rmNA$steps)) + geom_bar(stat = "identity", colour = "#009E73", fill = "#009E73", width = 0.7) + scale_x_date(labels = date_format("%m/%d"), breaks = date_breaks("week")) + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date by Week", y = "Total number of steps")
knit2html('PA1_template.Rmd')
mean(totalSteps, na.rm=TRUE, print = "the means for the datset is")
steps_mean <- mean(totalSteps, na.rm=TRUE)
print("the means for the datset is"+ steps_mean)
print("the mean for the datset is" steps_mean)
print("the mean for the datset is") + steps_mean
print(steps_mean)
print(edhedj)+(steps_mean)
print("edhedj")+(steps_mean)
printprint(paste0("the mean for the datset is" , steps_mean))
print(paste0("the mean for the datset is" , steps_mean))
print(paste0("the mean for the datset is " , steps_mean))
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
avgInternals<- aggregate(x=list(steps=data_rmNA$steps), by=list(interval=data_rmNA$interval),FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute intervals") +
ylab("Average number of steps taken from October to November")
ggplot(data=avgInternals, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute intervals") +
ylab("Average number of steps taken from October to November")
no
no
ggplot(data=avgInternals, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute intervals") +
ylab("Average number of steps taken from October to November")
ggplot(data=avgInternals, aes(x=interval, y=steps)) +
geom_line(size = 0.7) +
xlab("5-minute intervals") +
ylab("Average number of steps taken from October to November")
avgIntervals<- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),FUN=mean, na.rm=TRUE)
ggplot(data=avgIntervals, aes(x=interval, y=steps)) +
geom_line(size = 0.7) +
xlab("5-minute intervals") +
ylab("Average number of steps taken from October to November")
avgIntervals<- aggregate(x=list(steps=data$steps), by=list(interval=as.numeric(as.character(noNA$interval)))),FUN=mean, na.rm=TRUE)
ggplot(data=avgIntervals, aes(x=interval, y=steps)) +
geom_line(size = 0.7) +
xlab("5-minute intervals") +
ylab("Average number of steps taken from October to November")
avgIntervals<- aggregate(x=list(steps=data$steps), by=list(interval=as.numeric(as.character(data_rmNA$interval)))),FUN=mean, na.rm=TRUE)
avgIntervals<- aggregate(x=list(steps=data$steps), by=list(interval=as.numeric(as.character(data_rmNA$interval)),FUN=mean, na.rm=TRUE)
)
avgIntervals<- aggregate(x=list(steps=data$steps), by=list(interval=as.numeric(as.character(data_rmNA$interval))),FUN = mean, na.rm = TRUE)
avgIntervals<- aggregate(x=list(steps=data_rmNA$steps), by=list(interval=as.numeric(as.character(data_rmNA$interval))),FUN = mean, na.rm = TRUE)
ggplot(data=avgIntervals, aes(x=interval, y=steps)) +
geom_line(size = 0.7) +
xlab("5-minute intervals") +
ylab("Average number of steps taken from October to November")
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
max(avgIntervals$steps)
which.max(avgIntervals$steps)
avgIntervals[max(avgIntervals$steps), ]
avgIntervals[avgIntervals$steps == max(avgIntervals$steps), ]
mostInterval <- avgIntervals[avgIntervals$steps == max(avgIntervals$steps), ]
format(avgIntervals[mostInterval,'time'], format='%H:%M')
mostInterval
format(mostInterval[mostInterval,'time'], format='%H:%M')
format(mostInterval[interval,'time'], format='%H:%M')
mostInterval$interval
format([mostInterval$interval,'time'], format='%H:%M')
format(mostInterval$interval,'time', format='%H:%M')
format(mostInterval$interval, format='%H:%M')
format(mostInterval$interval,'time', format='%H:%M')
strptime(mostInterval$interval, format='%H:%M', tz = "")
strftime(mostInterval$interval, format='%H:%M', tz = "")
strftime(mostInterval$interval, format='%H:%M', tz = "GMT")
strptime(mostInterval$interval, format='%H:%M', tz = "GMT")
strptime(mostInterval$interval, format='%H:%M')
class(mostInterval$interval)
time <- as.POSIXct(mostInterval$interval)
time <- as.POSIXct(mostInterval$interval, tz = 'GMT')
time <- as.POSIXct(mostInterval$interval, origin="1960-10-01")
format(time, format='%H:%M')
format(time, format='%H:%M', tz = 'GMT')
format(time, 'time', format='%H:%M')
format(time, 'time', format='%H:%M', tz = "GMT")
mostInterval <- avgIntervals[avgIntervals$steps == which.max(avgIntervals$steps), ]
mostInterval
mostInterval <- avgIntervals[avgIntervals$steps == max(avgIntervals$steps), ]
which(mostInterval)
?which.max()
mostInterval <- avgIntervals[which.max(avgIntervals$steps), ]
mostInterval
mostInterval <- avgIntervals[avgIntervals[which.max(avgIntervals$steps), ]]
mostInterval <- avgIntervals[avgIntervals[which.max(avgIntervals$steps), ],]
mostInterval <- avgIntervals[,[avgIntervals[which.max(avgIntervals$steps), ]]
mostInterval <- avgIntervals[,[avgIntervals[which.max(avgIntervals$steps), ]]]
mostInterval <- avgIntervals$(avgIntervals[which.max(avgIntervals$steps), ])
mostInterval <- avgIntervals$avgIntervals[which.max(avgIntervals$steps), ]
mostInterval
mostInterval <- avgIntervals[which.max(avgIntervals$steps), ][1]
mostinterval
mostInterval <- avgIntervals[which.max(avgIntervals$steps), ][2]
mostinterval
mostInterval <- avgIntervals[which.max(avgIntervals$steps), ]
mostinterval*interval
mostinterval$interval
mostInterval <- avgIntervals[which.max(avgIntervals$steps), ]
mostinterval
mostInterval
mistInterval$interval
mostInterval$interval
mostInterval <- avgIntervals[which.max(avgIntervals$steps), ]
mostInterval$interval
print(mostInterval$interval)
knit2html('PA1_templare.Rmd')
knit2html('PA1_template.Rmd')
sum(is.na(data))
missing <- sum(is.na(data))
table(missing)
sum(is.na(data$steps))
data[is.na(data)] <- mean(totalSteps, na.rm=TRUE)
head(data)
sum(is.na(data))
mean(data, na.rm=TRUE)
seq_along(data)
length(data)
norw(data)
nrow(data)
noNAdata <- data
for (i in 1:nrow(noNAdata)) {
if (is.na(noNAdata$steps[i])) {
noNAdata$steps[i] <- avgInterval[which(noNAdata$interval[i] == avgInterval$interval), ]$steps
}
}
sum(is.na(noNAdata))
head(noNAdata)
avgIntervals
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
class(noNA_totalSteps)
knit2html('PA1_template.Rmd')
matrix(steps_mean, noNA_mean)
table(steps_mean, noNA_mean)
table(noNA_mean, steps_mean)
dataframe(noNA_mean, steps_mean)
data.frame(noNA_mean, steps_mean)
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
knit2html('PA1_template.Rmd')
class(noNA)
dateCol <- noNA$date
head(dateCol)
?weekdays()
weekdays(dateCol$date)
weekdays(dateCol[])
dateCol = within(dateCol, {
weekdayORweekend = ifelse(isTrue(weekdays(dateCol[])), 'weekday', 'weekend')
})
if function(isTrue(weekdays(dateCol[])) {
weekdayORweekend = 'weekday'
}
else
{weekdayORweekend = 'weekend'
}
if (isTrue(weekdays(dateCol[])) {
weekdayORweekend = 'weekday'
}
else
{weekdayORweekend = 'weekend'
}
if (isTrue(weekdays(dateCol[]))) {
weekdayORweekend = 'weekday'
}
else
{weekdayORweekend = 'weekend'
}
?isTRUE
if (isTrue(weekdays(dateCol[]) = T)) {
weekdayORweekend = 'weekday'
}
else
{weekdayORweekend = 'weekend'
}
if (isTrue(weekdays(dateCol[]) = T)) {
weekdayORweekend = 'weekday'
else
{
weekdayORweekend = 'weekend'
}
}
if (isTrue(weekdays(dateCol[]) = T)) {
weekdayORweekend = 'weekday'
}
else
{
weekdayORweekend = 'weekend'
}
if (isTrue(weekdays(dateCol[]) = T)) {
weekdayORweekend = 'weekday'
}
isTrue(weekdays(dateCol[]) = T
isTrue(weekdays(dateCol[]) == T
,
esr)
isTrue(weekdays(dateCol[]) == T)
if (isTRUE(weekdays(dateCol[]) = T)) {
weekdayORweekend = 'weekday'
}
if (isTRUE(weekdays(dateCol[]) == T)) {
weekdayORweekend = 'weekday'
}
if (isTRUE(weekdays(dateCol[]) == T)) {
weekdayORweekend = 'weekday'
}
else
{
weekdayORweekend = 'weekend'
}
if (isTRUE(weekdays(dateCol[]) == T)) {
weekdayORweekend = 'weekday'
}
if else
{
weekdayORweekend = 'weekend'
}
if (isTRUE(weekdays(dateCol[]) == T)) {
weekdayORweekend = 'weekday'
}else{
weekdayORweekend = 'weekend'
}
weekdayORweekend
colweekdayORweekend <- if (isTRUE(weekdays(dateCol[]) == T)) {
weekdayORweekend = 'weekday'
} else {
weekdayORweekend = 'weekend'
}
colweekdayORweekend
class(colweekdayORweekend)
class(dateCol)
class(noNA$date)
noNA$we.wee <- ifelse(weekdays(noNA$date) == T,"weekend", "weekdays")
head(noNA)
weekdays(2012-10-01)
weekdays("2012-10-01")
weekdays("2012-10-01", format = "%y%m/%d")
?weekdays()
weekdays(as.POSIXct("2012-10-01"))
noNA$weekORweekend <- ifelse(weekdays(noNA$date) == T,"Weekend", "Week day")
head(noNA)
noNA$WeekDay <- ifelse(weekdays(noNA$date) == T,"Weekend", "Week day")
head(noNA)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
